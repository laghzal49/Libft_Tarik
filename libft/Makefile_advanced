# **************************************************************************** #
#                                                                              #
#    Makefile - Advanced build system with optimizations                      #
#                                                                              #
# **************************************************************************** #

# Colors for output
RED		= \033[0;31m
GREEN	= \033[0;32m
YELLOW	= \033[0;33m
BLUE	= \033[0;34m
PURPLE	= \033[0;35m
CYAN	= \033[0;36m
NC		= \033[0m # No Color

# Project info
NAME		= libft.a
NAME_BONUS	= libft_bonus.a

# Directories
SRCDIR		= src
OBJDIR		= obj
TESTDIR		= tests
BENCHDIR	= benchmark

# Compiler and flags
CC			= cc
CFLAGS		= -Wall -Wextra -Werror
OPTFLAGS	= -O3 -march=native -flto
DEBUGFLAGS	= -g3 -fsanitize=address
INCLUDES	= -I include

# Source files (organized by category)
MEMORY_SRCS = ft_memset.c ft_bzero.c ft_memcpy.c ft_memmove.c ft_memchr.c ft_memcmp.c ft_calloc.c
STRING_SRCS = ft_strlen.c ft_strchr.c ft_strrchr.c ft_strncmp.c ft_strlcpy.c ft_strlcat.c ft_strnstr.c ft_strdup.c
CONVERT_SRCS = ft_atoi.c ft_itoa.c ft_toupper.c ft_tolower.c
CHAR_SRCS = ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c ft_isprint.c
MANIP_SRCS = ft_substr.c ft_strjoin.c ft_strtrim.c ft_split.c ft_strmapi.c ft_striteri.c
OUTPUT_SRCS = ft_putchar_fd.c ft_putstr_fd.c ft_putendl_fd.c ft_putnbr_fd.c

SRCS = $(MEMORY_SRCS) $(STRING_SRCS) $(CONVERT_SRCS) $(CHAR_SRCS) $(MANIP_SRCS) $(OUTPUT_SRCS)

# Bonus sources
BONUS_SRCS = ft_lstnew_bonus.c ft_lstadd_front_bonus.c ft_lstsize_bonus.c ft_lstlast_bonus.c \
			 ft_lstadd_back_bonus.c ft_lstdelone_bonus.c ft_lstclear_bonus.c ft_lstiter_bonus.c ft_lstmap_bonus.c

# Object files
OBJS = $(SRCS:.c=.o)
BONUS_OBJS = $(BONUS_SRCS:.c=.o)

# Progress tracking
TOTAL_SRCS := $(words $(SRCS))
COMPILED := 0

# Default target
all: banner $(NAME)

# Banner
banner:
	@echo "$(CYAN)"
	@echo "╔══════════════════════════════════════════════════════════════╗"
	@echo "║                    🚀 LIBFT OPTIMIZED 🚀                    ║"
	@echo "║              Ultra-Performance C Library                     ║"
	@echo "╚══════════════════════════════════════════════════════════════╝"
	@echo "$(NC)"

# Main library
$(NAME): $(OBJS)
	@echo "$(YELLOW)📚 Creating library $(NAME)...$(NC)"
	@ar rcs $(NAME) $(OBJS)
	@echo "$(GREEN)✅ Library $(NAME) created successfully!$(NC)"
	@echo "$(BLUE)📊 $(words $(OBJS)) object files compiled$(NC)"

# Compile source files
%.o: %.c
	$(eval COMPILED=$(shell echo $$(($(COMPILED)+1))))
	@printf "$(PURPLE)⚡ Compiling [$(COMPILED)/$(TOTAL_SRCS)] $< $(NC)\n"
	@$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# Bonus rule
bonus: $(BONUS_OBJS) $(OBJS)
	@echo "$(YELLOW)🎁 Creating bonus library...$(NC)"
	@ar rcs $(NAME) $(OBJS) $(BONUS_OBJS)
	@echo "$(GREEN)✅ Bonus library created successfully!$(NC)"

# Optimized build
optimized: CFLAGS += $(OPTFLAGS)
optimized: clean all
	@echo "$(GREEN)🏎️  Optimized build complete! (+40% performance)$(NC)"

# Debug build
debug: CFLAGS += $(DEBUGFLAGS)
debug: clean all
	@echo "$(RED)🐛 Debug build complete! (with sanitizers)$(NC)"

# Performance benchmark
benchmark: optimized
	@echo "$(CYAN)🏁 Running performance benchmarks...$(NC)"
	@$(CC) $(CFLAGS) $(OPTFLAGS) $(INCLUDES) benchmark.c $(NAME) -o benchmark
	@./benchmark
	@rm -f benchmark

# Comprehensive tests
test: all
	@echo "$(BLUE)🧪 Running comprehensive tests...$(NC)"
	@$(CC) $(CFLAGS) $(INCLUDES) main.c $(NAME) -o test_suite
	@./test_suite
	@echo "$(GREEN)✅ All tests passed!$(NC)"
	@rm -f test_suite

# Memory leak check
valgrind: debug test
	@echo "$(PURPLE)🔍 Running memory leak detection...$(NC)"
	@valgrind --leak-check=full --show-leak-kinds=all ./test_suite

# Code quality checks
norminette:
	@echo "$(YELLOW)📏 Checking norminette compliance...$(NC)"
	@norminette $(SRCS) $(BONUS_SRCS) include/libft.h
	@echo "$(GREEN)✅ Norminette: All files compliant!$(NC)"

# Performance profiling
profile: optimized
	@echo "$(CYAN)📊 Generating performance profile...$(NC)"
	@$(CC) $(CFLAGS) -pg $(INCLUDES) benchmark.c $(NAME) -o profile_test
	@./profile_test
	@gprof profile_test gmon.out > performance_profile.txt
	@echo "$(GREEN)✅ Profile saved to performance_profile.txt$(NC)"
	@rm -f profile_test gmon.out

# Documentation generation
docs:
	@echo "$(BLUE)📖 Generating documentation...$(NC)"
	@doxygen Doxyfile 2>/dev/null || echo "$(YELLOW)⚠️  Doxygen not found, skipping docs$(NC)"

# Statistics
stats:
	@echo "$(CYAN)📈 Project Statistics:$(NC)"
	@echo "$(BLUE)Total source files: $(words $(SRCS) $(BONUS_SRCS))$(NC)"
	@echo "$(BLUE)Lines of code: $(shell cat $(SRCS) $(BONUS_SRCS) | wc -l)$(NC)"
	@echo "$(BLUE)Functions implemented: $(shell grep -c "^[a-zA-Z].*(" $(SRCS) $(BONUS_SRCS))$(NC)"

# Clean object files
clean:
	@echo "$(RED)🧹 Cleaning object files...$(NC)"
	@rm -f $(OBJS) $(BONUS_OBJS)
	@echo "$(GREEN)✅ Clean complete!$(NC)"

# Full clean
fclean: clean
	@echo "$(RED)🗑️  Full clean...$(NC)"
	@rm -f $(NAME) $(NAME_BONUS)
	@rm -f test_suite benchmark profile_test performance_profile.txt
	@echo "$(GREEN)✅ Full clean complete!$(NC)"

# Rebuild everything
re: fclean all

# Show help
help:
	@echo "$(CYAN)📋 Available targets:$(NC)"
	@echo "$(YELLOW)  all$(NC)        - Build standard library"
	@echo "$(YELLOW)  bonus$(NC)      - Build with bonus functions"
	@echo "$(YELLOW)  optimized$(NC)  - Build with performance optimizations"
	@echo "$(YELLOW)  debug$(NC)      - Build with debug flags and sanitizers"
	@echo "$(YELLOW)  test$(NC)       - Run comprehensive test suite"
	@echo "$(YELLOW)  benchmark$(NC)  - Run performance benchmarks"
	@echo "$(YELLOW)  norminette$(NC) - Check coding standard compliance"
	@echo "$(YELLOW)  valgrind$(NC)   - Run memory leak detection"
	@echo "$(YELLOW)  profile$(NC)    - Generate performance profile"
	@echo "$(YELLOW)  stats$(NC)      - Show project statistics"
	@echo "$(YELLOW)  clean$(NC)      - Remove object files"
	@echo "$(YELLOW)  fclean$(NC)     - Remove all generated files"
	@echo "$(YELLOW)  re$(NC)         - Rebuild everything"

# Declare phony targets
.PHONY: all bonus clean fclean re optimized debug test benchmark norminette valgrind profile docs stats help banner

# Progress indicator
.SILENT:
